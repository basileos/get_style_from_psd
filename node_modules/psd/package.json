{
  "name": "psd",
  "description": "A general purpose Photoshop file parser.",
  "version": "3.1.0",
  "main": "./index.js",
  "keywords": [
    "psd",
    "parser",
    "photoshop",
    "adobe",
    "reader"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:meltingice/psd.js.git"
  },
  "dependencies": {
    "coffee-script": "~ 1.7.1",
    "jspack": "~ 0.0.3",
    "coffeescript-module": "~ 0.2.1",
    "parse-engine-data": "~ 0.1",
    "pngjs": "~ 0.4.0",
    "rsvp": "~ 3.0.6",
    "lodash": "~ 2.4",
    "iconv-lite": "~ 0.4.4"
  },
  "scripts": {
    "test": "mocha test"
  },
  "devDependencies": {
    "coffeeify": "~ 0.6.0",
    "browserify": "~ 3.46.0",
    "mocha": "~ 1.18.2",
    "should": "~ 3.3.1",
    "rimraf": "~ 2.2.8",
    "codo": "~ 2.0.11"
  },
  "readme": "# PSD.js\n\n[![Build Status](https://travis-ci.org/meltingice/psd.js.svg?branch=master)](https://travis-ci.org/meltingice/psd.js)\n\nA general purpose PSD parser written in Coffeescript. Based off of [PSD.rb](https://github.com/layervault/psd.rb). It allows you to work with a Photoshop document in a manageable tree structure and find out important data such as:\n\n* Document structure\n* Document size\n* Layer/folder size + positioning\n* Layer/folder names\n* Layer/folder visibility and opacity\n* Font data (via [psd-enginedata](https://github.com/layervault/psd-enginedata))\n  * Text area contents\n  * Font names, sizes, and colors\n* Color mode and bit-depth\n* Vector mask data\n* Flattened image data\n* Layer comps\n\nRuns in both NodeJS and the browser (using browserify). There are still some pieces missing that are present in PSD.rb, such as layer comp filtering, a built-in renderer, and many layer info blocks. The eventual goal is full feature parity with PSD.rb.\n\n## Installation\n\nPSD.js has no native dependencies. Simply add `psd` to your package.json or run `npm install psd`.\n\n## Usage\n\nPSD.js works almost exactly the same in the browser and NodeJS.\n\n### NodeJS Example\n\n``` js\nvar PSD = require('psd');\nvar psd = PSD.fromFile(\"path/to/file.psd\");\npsd.parse();\n\nconsole.log(psd.tree().export());\nconsole.log(psd.tree().childrenAtPath('A/B/C')[0].export());\n\n// You can also use promises syntax for opening and parsing\nPSD.open(\"path/to/file.psd\").then(function (psd) {\n  return psd.image.saveAsPng('./output.png');\n}).then(function () {\n  console.log(\"Finished!\");\n});\n\n```\n\n### Browser Example\n\n``` js\nvar PSD = require('psd');\n\n// Load from URL\nPSD.fromURL(\"/path/to/file.psd\").then(function(psd) {\n  document.getElementById('ImageContainer').appendChild(psd.image.toPng());\n});\n\n// Load from event, e.g. drag & drop\nfunction onDrop(evt) {\n  PSD.fromEvent(evt).then(function (psd) {\n    console.log(psd.tree().export());\n  }); \n}\n```\n\n### Traversing the Document\n\nTo access the document as a tree structure, use `psd.tree()` to get the root node. From there, work with the tree using any of these methods:\n\n* `root()`: get the root node from anywhere in the tree\n* `isRoot()`: is this the root node?\n* `children()`: get all immediate children of the node\n* `hasChildren()`: does this node have any children?\n* `childless()`: opposite of `hasChildren()`\n* `ancestors()`: get all ancestors in the path of this node (excluding the root)\n* `siblings()`: get all sibling tree nodes including the current one (e.g. all layers in a folder)\n* `nextSibling()`: gets the sibling immediately following the current node\n* `prevSibling()`: gets the sibling immediately before the current node\n* `hasSiblings()`: does this node have any siblings?\n* `onlyChild()`: opposite of `hasSiblings()`\n* `descendants()`: get all descendant nodes not including the current one\n* `subtree()`: same as descendants but starts with the current node\n* `depth()`: calculate the depth of the current node (root node is 0)\n* `path()`: gets the path to the current node\n\nIf you know the path to a group or layer within the tree, you can search by that path. Note that this always returns an Array because layer/group names do not have to be unique. The search is always scoped to the descendants of the current node, as well.\n\n``` js\npsd.tree().childrenAtPath('Version A/Matte');\npsd.tree().childrenAtPath(['Version A', 'Matte']);\n```\n\n### Accessing Layer Data\n\nTo get data such as the name or dimensions of a layer:\n\n``` js\nnode = psd.tree().descendants()[0];\nnode.get('name');\nnode.get('width');\n```\n\nPSD files also store various pieces of information in \"layer info\" blocks. See [this file](https://github.com/meltingice/psd.js/blob/master/lib/psd/layer/info.coffee) for all of the possible layer info blocks that PSD.js parses (in `LAYER_INFO`). Which blocks a layer has varies from layer-to-layer, but to access them you can do:\n\n``` js\nnode = psd.tree().descendants()[0]\nnode.get('typeTool').export()\nnode.get('vectorMask').export()\n```\n\n### Exporting Data\n\nWhen working with the tree structure, you can recursively export any node to an object. This does not dump *everything*, but it does include the most commonly accessed information.\n\n``` js\nconsole.log(psd.tree().export());\n```\n\nWhich produces something like:\n\n``` js\n{ children: \n   [ { type: 'group',\n       visible: false,\n       opacity: 1,\n       blendingMode: 'normal',\n       name: 'Version D',\n       left: 0,\n       right: 900,\n       top: 0,\n       bottom: 600,\n       height: 600,\n       width: 900,\n       children: \n        [ { type: 'layer',\n            visible: true,\n            opacity: 1,\n            blendingMode: 'normal',\n            name: 'Make a change and save.',\n            left: 275,\n            right: 636,\n            top: 435,\n            bottom: 466,\n            height: 31,\n            width: 361,\n            mask: {},\n            text: \n             { value: 'Make a change and save.',\n               font: \n                { name: 'HelveticaNeue-Light',\n                  sizes: [ 33 ],\n                  colors: [ [ 85, 96, 110, 255 ] ],\n                  alignment: [ 'center' ] },\n               left: 0,\n               top: 0,\n               right: 0,\n               bottom: 0,\n               transform: { xx: 1, xy: 0, yx: 0, yy: 1, tx: 456, ty: 459 } },\n            image: {} } ] } ],\n    document: \n       { width: 900,\n         height: 600,\n         resources: \n          { layerComps: \n             [ { id: 692243163, name: 'Version A', capturedInfo: 1 },\n               { id: 725235304, name: 'Version B', capturedInfo: 1 },\n               { id: 730932877, name: 'Version C', capturedInfo: 1 } ],\n            guides: [],\n            slices: [] } } }\n```\n\nYou can also export the PSD to a flattened image. Please note that, at this time, not all image modes + depths are supported.\n\n``` js\npng = psd.image.toPng(); // get PNG object\npsd.image.saveAsPng('path/to/output.png').then(function () {\n  console.log('Exported!');\n});\n```\n\nThis uses the full rasterized preview provided by Photoshop. If the file was not saved with Compatibility Mode enabled, this will return an empty image.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/meltingice/psd.js/issues"
  },
  "homepage": "https://github.com/meltingice/psd.js",
  "_id": "psd@3.1.0",
  "dist": {
    "shasum": "02b01d52b22c003b7f0d2183806993484aed6809"
  },
  "_from": "psd@",
  "_resolved": "https://registry.npmjs.org/psd/-/psd-3.1.0.tgz"
}
